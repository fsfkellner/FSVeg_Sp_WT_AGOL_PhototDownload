# This toolbox was developed by Fred Kellner,
# RedCastle Resources Contract Remote Sensing Analsyst to the Region 1
# Geospatial Group. For Question regarding the code in this script please
# contact me at frederick.kellner@usda.gov

# Also its not possible to follow PEP 8 with many of labels
# in these classes and parameters. Other wise the user interface
# that is generated by ESRI from these boiler plate classes will have
# retun carriages etc.

import arcpy


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "A toolbox to download photos attached to editable feature services in ArcGIS Online"
        self.alias = ""

        # List of tool classes associated with this toolbox
        self.tools = [DownloadAGOLPhotos]


class DownloadAGOLPhotos(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Download Photo Data from Survey123/ AGOL FSVeg Spatial WT Form "
        self.description = ""
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        param0 = arcpy.Parameter(
            displayName='AGOL Username',
            name='AGOL Username',
            datatype='GPString',
            parameterType="Required",
            direction="Input")

        param1 = arcpy.Parameter(
            displayName='AGOL Password',
            name='AGOL Password',
            datatype='GPStringHidden',
            parameterType="Required",
            direction="Input")

        param2 = arcpy.Parameter(
            displayName='Output Folder',
            name='Output folder location where a folder containing photos and filegeodatabase will be written',
            datatype='DEFolder',
            parameterType="Required",
            direction="Input")

        param3 = arcpy.Parameter(
            displayName='Project Area Boundary',
            name='Provide a Feature Class of your Project Boundary',
            datatype='GPFeatureLayer',
            parameterType="Optional",
            direction="Input")

        params = [param0, param1, param2, param3]
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        import sys
        import arcpy
        # import urllib
        # import json
        # import os

        sys.path.append(r'C:\Data')
        import NRGG
        from NRGG import (
            Python2RESTAPI,
            FeatureClassForAGOLFiltering
        )
        import NRGG.FSVegSpatial_WalkThroughTools as FSVeg
        from NRGG import generateAGOLToken

        arcpy.env.overwriteOutput = True

        AGOLUsername = parameters[0].valueAsText
        AGOLPassword = parameters[1].valueAsText
        outputLocation = parameters[2].valueAsText
        areaofInterest = parameters[3].valueAsText
        AGOLFeatureServiceLayerNumber = 3

        AGOLFeatureServiceURL = r'https://services1.arcgis.com/gGHDlz6USftL5Pau/arcgis/rest/services/survey123_a15e8159fac04b6f86e6cee04a785793_stakeholder/FeatureServer'

        AGOLToken = generateAGOLToken(AGOLUsername, AGOLPassword)
        featureService = Python2RESTAPI(
            AGOLFeatureServiceURL, AGOLToken, AGOLFeatureServiceLayerNumber)

        if featureService.layerHasPhotoAttachments():
            if areaofInterest:
                arcpy.AddMessage('''Preparing Area of Interest
                    for use in AGOL''')
                AOI = FeatureClassForAGOLFiltering(
                    areaofInterest)
                projectedAOIPath = AOI.AOIToGCSWGS84InDefaultGDB()
                AOIVertices = AOI.getVerticesOfProjectedAOI(projectedAOIPath)
                AOIVerticesDict = AOI.makeAOIVerticesDictionaryForRESTURL(
                    AOIVertices)
                featureServiceObjectIDs = featureService.getObjectIDsInAOI(
                    AOIVerticesDict)
            else:
                featureServiceObjectIDs = featureService.getObjectIDs()
        else:
            raise Exception(
                '''The AGOL Feature Service Layer that you want to download
                 photos from does not have photos attached''')

        objectIDsWithAttachments = featureService.queryObjectIDsForAttachments(
            featureServiceObjectIDs)

        statusURLForAGOLReplica = NRGG.getStatusURLForAGOLReplica(
            featureService.name(),
            featureService.url,
            featureService.token,
            featureService.layerNumber,
            objectIDsWithAttachments)
        resutlURLForReplica = NRGG.waitForAGOLReplica(
            statusURLForAGOLReplica, AGOLToken)
        pathOfZippedReplicaGDB = NRGG.downloadAGOLReplicaInFGDB(
            resutlURLForReplica,
            featureService.token,
            featureService.name(),
            outputLocation)

        arcpy.AddMessage('''Writing Photos to Folder and
            Cleaning up Final FSVeg Photo Feature Class''')
        FSVeg.unzipAGOLReplicaGDBAndRenameToFSVeg(
            pathOfZippedReplicaGDB, outputLocation)

        FSVeg.renamePlotsFilesToFSVeg(outputLocation)
        FSVegGlobalIDDictionary = FSVeg.createDictOfFSVegIDsAndPlots(
            outputLocation)
        dictOfFSVegPhotoNames = FSVeg.writeAttachedPhotosMakeDictOfPhotoNames(
            outputLocation, FSVegGlobalIDDictionary)
        FSVeg.addPhotoNameFieldAndPopulate(
            outputLocation, dictOfFSVegPhotoNames)

        FSVeg.deleteFiedsFromFSVegPhotoFeatureClass(outputLocation)
        FSVeg.deleteFeaturesWithIncorrectSettingIDValues(outputLocation)
        FSVeg.alterPlotSettingIDFieldName(outputLocation)
